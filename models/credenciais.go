// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Credenciais credenciais
// swagger:model Credenciais
type Credenciais struct {

	// senha
	// Required: true
	Senha *string `json:"senha"`

	// usuario
	// Required: true
	Usuario *string `json:"usuario"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Credenciais) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Senha *string `json:"senha"`

		Usuario *string `json:"usuario"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Senha = dataAO0.Senha

	m.Usuario = dataAO0.Usuario

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Credenciais) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Senha *string `json:"senha"`

		Usuario *string `json:"usuario"`
	}

	dataAO0.Senha = m.Senha

	dataAO0.Usuario = m.Usuario

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this credenciais
func (m *Credenciais) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSenha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsuario(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Credenciais) validateSenha(formats strfmt.Registry) error {

	if err := validate.Required("senha", "body", m.Senha); err != nil {
		return err
	}

	return nil
}

func (m *Credenciais) validateUsuario(formats strfmt.Registry) error {

	if err := validate.Required("usuario", "body", m.Usuario); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Credenciais) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Credenciais) UnmarshalBinary(b []byte) error {
	var res Credenciais
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
